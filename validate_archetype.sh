#!/bin/bash
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
TEST_PROJECT_NAME="test-modernjs-host"  # project directory name from project-name template variable
TEST_PROJECT_TITLE="Test Modern.js Application"
MAX_STARTUP_TIME=120 # 2 minutes in seconds
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TEMP_DIR="$(mktemp -d)"
VALIDATION_LOG="$TEMP_DIR/validation.log"

# Cleanup function - DISABLED FOR DEBUGGING
cleanup() {
    echo -e "${BLUE}NOT cleaning up for debugging...${NC}"
    echo -e "${YELLOW}Generated project directory: $TEMP_DIR/$TEST_PROJECT_NAME${NC}"
    if [ -d "$TEMP_DIR/$TEST_PROJECT_NAME" ]; then
        cd "$TEMP_DIR/$TEST_PROJECT_NAME"
        if [ -f "docker-compose.yml" ] || [ -f "Dockerfile" ]; then
            echo -e "${YELLOW}To manually clean up later, run:${NC}"
            echo -e "${YELLOW}cd $TEMP_DIR/$TEST_PROJECT_NAME && docker-compose down --volumes --remove-orphans 2>/dev/null || true${NC}"
            echo -e "${YELLOW}rm -rf $TEMP_DIR${NC}"
        fi
    fi
    # rm -rf "$TEMP_DIR"  # DISABLED
}

# Trap cleanup on exit
trap cleanup EXIT

# Logging function
log() {
    echo -e "$1" | tee -a "$VALIDATION_LOG"
}

# Success/Failure tracking
TESTS_PASSED=0
TESTS_FAILED=0

test_result() {
    if [ $1 -eq 0 ]; then
        log "${GREEN}✅ $2${NC}"
        TESTS_PASSED=$((TESTS_PASSED + 1))
    else
        log "${RED}❌ $2${NC}"
        TESTS_FAILED=$((TESTS_FAILED + 1))
        return 1
    fi
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

    # Check prerequisites
check_prerequisites() {
    log "${BLUE}Checking prerequisites...${NC}"
    
    local missing_deps=()
    
    if ! command_exists archetect; then
        missing_deps+=("archetect")
    fi
    
    if ! command_exists docker; then
        missing_deps+=("docker")
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        log "${RED}Missing required dependencies: ${missing_deps[*]}${NC}"
        log "${YELLOW}Please install the missing dependencies and try again.${NC}"
        log "${YELLOW}Required: archetect, docker${NC}"
        exit 1
    fi
    
    test_result 0 "All prerequisites available"
}

# Generate test project from archetype
generate_test_project() {
    log "\n${BLUE}Generating test project from archetype...${NC}"
    
    cd "$TEMP_DIR"
    
    # Use the pre-created complete answers file
    if [ -f "$SCRIPT_DIR/test_answers_complete.yaml" ]; then
        cp "$SCRIPT_DIR/test_answers_complete.yaml" test_answers.yaml
        log "${GREEN}Using test_answers_complete.yaml${NC}"
    else
        log "${RED}test_answers_complete.yaml not found in $SCRIPT_DIR${NC}"
        return 1
    fi
    
    # Generate the project using render command
    log "${YELLOW}Running: archetect render $SCRIPT_DIR -U --answer-file test_answers.yaml${NC}"
    if archetect render "$SCRIPT_DIR" -U --answer-file test_answers.yaml >> "$VALIDATION_LOG" 2>&1; then
        test_result 0 "Archetype generation successful"
    else
        test_result 1 "Archetype generation failed"
        log "${RED}Check validation log: $VALIDATION_LOG${NC}"
        return 1
    fi
    
    # Verify the generated structure (project name is generated by the archetype)
    if [ -d "$TEST_PROJECT_NAME" ]; then
        test_result 0 "Generated project directory exists ($TEST_PROJECT_NAME)"
    else
        # Maybe the directory name is different, let's check what was actually created
        local generated_dir=$(find . -maxdepth 1 -type d -name "*host*" -o -name "*shell*" | head -1)
        if [ -n "$generated_dir" ]; then
            TEST_PROJECT_NAME=$(basename "$generated_dir")
            log "${YELLOW}Found generated directory: $TEST_PROJECT_NAME${NC}"
            test_result 0 "Generated project directory exists ($TEST_PROJECT_NAME)"
        else
            test_result 1 "Generated project directory missing"
            return 1
        fi
    fi
}

# Validate template substitution
validate_template_substitution() {
    log "\n${BLUE}Validating template variable substitution...${NC}"
    
    cd "$TEMP_DIR/$TEST_PROJECT_NAME"
    
    local substitution_errors=0
    
    # Check for unreplaced template variables (exclude GitHub Actions variables)
    log "${YELLOW}Checking for unreplaced template variables...${NC}"
    if grep -r "\{\{[[:space:]]*[^}$]*[[:space:]]*\}\}" . --exclude-dir=node_modules --exclude-dir=.git 2>/dev/null | grep -v '\$\{\{'; then
        log "${RED}Found unreplaced template variables!${NC}"
        substitution_errors=1
    else
        log "${GREEN}No unreplaced template variables found${NC}"
    fi
    
    # Check that project name was substituted correctly in README
    if [ -f "README.md" ]; then
        if grep -q "$TEST_PROJECT_TITLE" README.md; then
            log "${GREEN}Project title correctly substituted in README.md${NC}"
        else
            log "${RED}Project title not correctly substituted in README.md${NC}"
            substitution_errors=1
        fi
    else
        log "${RED}README.md not found${NC}"
        substitution_errors=1
    fi
    
    # Check nginx.conf exists and has basic structure
    if [ -f "nginx.conf" ]; then
        if grep -q "server {" nginx.conf && grep -q "listen 80" nginx.conf; then
            log "${GREEN}nginx.conf has valid server configuration${NC}"
        else
            log "${RED}nginx.conf missing valid server configuration${NC}"
            substitution_errors=1
        fi
    else
        log "${RED}nginx.conf not found${NC}"
        substitution_errors=1
    fi
    
    test_result $substitution_errors "Template variable substitution"
}

# Validate project structure
validate_project_structure() {
    log "\n${BLUE}Validating project structure...${NC}"
    
    cd "$TEMP_DIR/$TEST_PROJECT_NAME"
    
    local structure_errors=0
    
    # Check essential files for nginx MFE host
    local required_files=(
        "README.md"
        "Dockerfile"
        "nginx.conf"
    )
    
    for file in "${required_files[@]}"; do
        if [ -f "$file" ]; then
            log "${GREEN}  ✅ $file exists${NC}"
        else
            log "${RED}  ❌ $file missing${NC}"
            structure_errors=1
        fi
    done
    
    # Check essential directories (apps directory should exist)
    local required_dirs=(
        "apps"
    )
    
    for dir in "${required_dirs[@]}"; do
        if [ -d "$dir" ]; then
            log "${GREEN}  ✅ $dir/ exists${NC}"
        else
            log "${RED}  ❌ $dir/ missing${NC}"
            structure_errors=1
        fi
    done
    
    # Check that Modern.js specific files are NOT present (this is an nginx host, not a Modern.js app)
    local forbidden_files=(
        "package.json"
        "modern.config.ts"
        "tsconfig.json"
        "src"
        "node_modules"
    )
    
    for file in "${forbidden_files[@]}"; do
        if [ -e "$file" ]; then
            log "${RED}  ❌ Found unexpected file/directory: $file${NC}"
            structure_errors=1
        else
            log "${GREEN}  ✅ No unexpected $file found${NC}"
        fi
    done
    
    test_result $structure_errors "Project structure validation"
}

# Test nginx configuration
test_nginx_configuration() {
    log "\n${BLUE}Testing nginx configuration...${NC}"
    
    cd "$TEMP_DIR/$TEST_PROJECT_NAME"
    
    # Test nginx configuration syntax by wrapping the server block in a complete config
    log "${YELLOW}Testing nginx configuration syntax...${NC}"
    
    # Create a temporary complete nginx.conf for testing
    cat > temp_nginx.conf << 'EOF'
events {
    worker_connections 1024;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
EOF
    cat nginx.conf >> temp_nginx.conf
    echo "}" >> temp_nginx.conf
    
    if docker run --rm -v "$(pwd)/temp_nginx.conf:/etc/nginx/nginx.conf:ro" nginx:alpine nginx -t >> "$VALIDATION_LOG" 2>&1; then
        test_result 0 "nginx configuration syntax is valid"
        rm temp_nginx.conf
    else
        test_result 1 "nginx configuration syntax is invalid"
        rm temp_nginx.conf
        return 1
    fi
    
    # Check for CORS headers in configuration
    if grep -q "Access-Control-Allow-Origin" nginx.conf; then
        test_result 0 "CORS headers configured in nginx"
    else
        test_result 1 "CORS headers not found in nginx configuration"
    fi
    
    # Check for static file serving
    if grep -q "try_files" nginx.conf; then
        test_result 0 "Static file serving configured"
    else
        test_result 1 "Static file serving not configured"
    fi
}

# Test dockerfile validation
test_dockerfile_validation() {
    log "\n${BLUE}Testing Dockerfile validation...${NC}"
    
    cd "$TEMP_DIR/$TEST_PROJECT_NAME"
    
    # Check Dockerfile structure
    if grep -q "FROM nginx" Dockerfile; then
        test_result 0 "Dockerfile uses nginx base image"
    else
        test_result 1 "Dockerfile does not use nginx base image"
        return 1
    fi
    
    # Check if nginx.conf is copied
    if grep -q "COPY.*nginx.conf" Dockerfile; then
        test_result 0 "Dockerfile copies nginx configuration"
    else
        test_result 1 "Dockerfile does not copy nginx configuration"
    fi
    
    # Check if port is exposed
    if grep -q "EXPOSE.*80" Dockerfile; then
        test_result 0 "Dockerfile exposes port 80"
    else
        test_result 1 "Dockerfile does not expose port 80"
    fi
}

# Test static content setup
test_static_content_setup() {
    log "\n${BLUE}Testing static content setup...${NC}"
    
    cd "$TEMP_DIR/$TEST_PROJECT_NAME"
    
    # Create a simple index.html for testing
    mkdir -p apps
    cat > apps/index.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Test MFE Host</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body>
    <h1>Micro Frontend Host</h1>
    <p>This is a test page for the nginx MFE host.</p>
    <p>Apps directory is properly mounted and serving content!</p>
    <div id="app-status">Ready to host micro frontends</div>
</body>
</html>
EOF
    
    if [ -f "apps/index.html" ]; then
        test_result 0 "Test static content created"
    else
        test_result 1 "Failed to create test static content"
        return 1
    fi
    
    # Check if apps directory exists and is accessible
    if [ -d "apps" ] && [ -r "apps" ]; then
        test_result 0 "Apps directory is accessible"
    else
        test_result 1 "Apps directory is not accessible"
        return 1
    fi
}



# Test Docker build
test_docker_build() {
    log "\n${BLUE}Testing Docker build...${NC}"
    
    cd "$TEMP_DIR/$TEST_PROJECT_NAME"
    
    local docker_start_time=$(date +%s)
    
    log "${YELLOW}Running: docker build -t $TEST_PROJECT_NAME .${NC}"
    if docker build -t "$TEST_PROJECT_NAME" . >> "$VALIDATION_LOG" 2>&1; then
        local docker_end_time=$(date +%s)
        local docker_time=$((docker_end_time - docker_start_time))
        test_result 0 "Docker build successful ($docker_time seconds)"
        
        # Test running the container
        log "${YELLOW}Testing Docker container startup...${NC}"
        if docker run -d --name "${TEST_PROJECT_NAME}-test" -p 3001:80 "$TEST_PROJECT_NAME" >> "$VALIDATION_LOG" 2>&1; then
            
            # Wait for container to be ready
            local max_wait=30
            local waited=0
            
            while [ $waited -lt $max_wait ]; do
                if curl -s --connect-timeout 5 --max-time 5 http://localhost:3001 >/dev/null 2>&1; then
                    test_result 0 "Docker container started and accessible"
                    break
                fi
                sleep 2
                waited=$((waited + 2))
            done
            
            if [ $waited -lt $max_wait ]; then
                # Test container homepage content
                log "${YELLOW}Validating Docker container homepage content...${NC}"
                local container_content=$(curl -s --connect-timeout 5 --max-time 10 http://localhost:3001 2>/dev/null)
                local container_errors=0
                
                # Check for expected content in container
                if echo "$container_content" | grep -q -i "micro frontend\|host\|test" || echo "$container_content" | grep -q "<title>"; then
                    test_result 0 "Docker container homepage contains expected content"
                else
                    test_result 1 "Docker container homepage missing expected content"
                    container_errors=1
                fi
                
                if [ ${#container_content} -gt 100 ]; then
                    test_result 0 "Docker container homepage has substantial content (${#container_content} characters)"
                else
                    test_result 1 "Docker container homepage content too minimal (${#container_content} characters)"
                    container_errors=1
                fi
                
                # Test apps directory content
                log "${YELLOW}Testing apps directory content serving...${NC}"
                local apps_content=$(curl -s --connect-timeout 5 --max-time 10 http://localhost:3001/apps/ 2>/dev/null)
                
                if echo "$apps_content" | grep -q "Ready to host micro frontends"; then
                    test_result 0 "Apps directory index.html is properly served"
                else
                    test_result 1 "Apps directory index.html not accessible or missing expected content"
                    container_errors=1
                fi
                
                if echo "$apps_content" | grep -q "Apps directory is properly mounted"; then
                    test_result 0 "Apps directory content confirms proper mounting"
                else
                    test_result 1 "Apps directory content missing mounting confirmation"
                    container_errors=1
                fi
                
                docker stop "${TEST_PROJECT_NAME}-test" >> "$VALIDATION_LOG" 2>&1
                docker rm "${TEST_PROJECT_NAME}-test" >> "$VALIDATION_LOG" 2>&1
                
                if [ $container_errors -eq 0 ]; then
                    return 0
                else
                    return 1
                fi
            else
                test_result 1 "Docker container not accessible"
                docker stop "${TEST_PROJECT_NAME}-test" >> "$VALIDATION_LOG" 2>&1 || true
                docker rm "${TEST_PROJECT_NAME}-test" >> "$VALIDATION_LOG" 2>&1 || true
                return 1
            fi
        else
            test_result 1 "Docker container failed to start"
        fi
    else
        test_result 1 "Docker build failed"
        return 1
    fi
}

# Main validation workflow
main() {
    log "${BLUE}==============================================${NC}"
    log "${BLUE}Nginx Modern.js MFE Host Archetype Validation${NC}"
    log "${BLUE}==============================================${NC}"
    log "Validation log: $VALIDATION_LOG"
    log "Temp directory: $TEMP_DIR"
    log "${YELLOW}Generated project will be at: $TEMP_DIR/$TEST_PROJECT_NAME${NC}"
    
    local overall_start_time=$(date +%s)
    
    # Run all validation steps
    check_prerequisites || exit 1
    generate_test_project || exit 1
    validate_template_substitution || exit 1
    validate_project_structure || exit 1
    
    # Check if we should stop after generation for debugging
    if [ "$1" = "--generate-only" ]; then
        log "\n${YELLOW}Stopping after generation as requested. Project generated at: $TEMP_DIR/$TEST_PROJECT_NAME${NC}"
        return 0
    fi
    
    log "\n${BLUE}Starting comprehensive testing...${NC}"
    local testing_start_time=$(date +%s)
    
    test_nginx_configuration || exit 1
    test_dockerfile_validation || exit 1
    test_static_content_setup || exit 1
    # Docker test can be skipped if it fails due to environment issues
    test_docker_build || echo "⚠️  Docker build test failed, but core functionality is working"
    
    local testing_end_time=$(date +%s)
    local testing_total_time=$((testing_end_time - testing_start_time))
    
    log "\n${BLUE}Testing time: ${testing_total_time} seconds${NC}"
    
    if [ $testing_total_time -le $MAX_STARTUP_TIME ]; then
        test_result 0 "Complete workflow within 2 minutes ($testing_total_time seconds)"
    else
        test_result 1 "Complete workflow exceeded 2 minutes ($testing_total_time seconds)"
    fi
    
    local overall_end_time=$(date +%s)
    local total_time=$((overall_end_time - overall_start_time))
    
    # Final summary
    log "\n${BLUE}==============================================${NC}"
    log "${BLUE}Validation Summary${NC}"
    log "${BLUE}==============================================${NC}"
    log "Total tests: $((TESTS_PASSED + TESTS_FAILED))"
    log "${GREEN}Passed: $TESTS_PASSED${NC}"
    log "${RED}Failed: $TESTS_FAILED${NC}"
    log "Total validation time: $total_time seconds"
    log "Testing workflow time: $testing_total_time seconds"
    
    if [ $TESTS_FAILED -eq 0 ]; then
        log "\n${GREEN}🎉 ALL VALIDATION TESTS PASSED! ARCHETYPE IS BOSS-LEVEL READY! 🚀${NC}"
        log "${YELLOW}Generated project preserved at: $TEMP_DIR/$TEST_PROJECT_NAME${NC}"
        return 0
    else
        log "\n${RED}❌ Validation failed. Please check the issues above.${NC}"
        log "${YELLOW}Validation log available at: $VALIDATION_LOG${NC}"
        log "${YELLOW}Generated project preserved at: $TEMP_DIR/$TEST_PROJECT_NAME${NC}"
        return 1
    fi
}

# Run main function
main "$@"